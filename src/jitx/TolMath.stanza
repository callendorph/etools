#use-added-syntax(jitx)
defpackage etools/jitx/TolMath :
  import core
  import jitx
  import etools/MathTools
  import etools/Errors

public defn negate (A:Toleranced) -> Toleranced :
  ; Negate will flip min and max I think ?
  min-typ-max(negate(max-value(A)), negate(typ(A)), negate(min-value(A)))

public defn times (A:Toleranced, B:Double) -> Toleranced :
  val minV = B * min-value(A)
  val maxV = B * max-value(A)
  val typV = B * typ(A)

  if B > 0.0 :
    min-typ-max(minV, typV, maxV)
  else:
    min-typ-max(maxV, typV, minV)

public defn divide (A:Toleranced, B:Double) -> Toleranced :
  A  * (1.0 / B)

public defn apply (f:Double -> Double, A:Toleranced) -> Toleranced : 
  min-typ-max(f(min-value(A)), f(typ-value(A)), f(max-value(A)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Comparison Operators
;;
;;  I'm interpreting comparison operators as:
;;
;;  less        =>   Strictly less than - ie:
;;                   There is no overlap of the tolerance values.
;;  less-eq     =>   Overlap allowed but max(A) < max(B)
;;  greater     =>   Similar concept
;;  greater-eq  =>

public defn less? (A:Toleranced, B:Toleranced ) -> True|False :
  max-value(A) < min-value(B)

public defn less-eq? (A:Toleranced, B:Toleranced ) -> True|False :
  (A < B) or ( max-value(A) <= max-value(B))

public defn greater? (A:Toleranced, B:Toleranced ) -> True|False :
  min-value(A) > max-value(B)

public defn greater-eq? (A:Toleranced, B:Toleranced ) -> True|False :
  ; This is another way - but I think the listed method below is
  ;;  faster in the case where A|B != false
  ;( A > B ) or ((A|B) != false)
  ( A > B ) or (max-value(A) >= max-value(B)) ; ((min-value(A) < max-value(B)) and (max-value(A) > max-value(B)))

public defn less? (A:Toleranced, B:Double ) -> True|False :
  max-value(A) < B

public defn less-eq? (A:Toleranced, B:Double ) -> True|False :
  (max-value(A) <= B) or in-range?(A, B)

public defn greater? (A:Toleranced, B:Double ) -> True|False :
  min-value(A) > B

public defn greater-eq? (A:Toleranced, B:Double ) -> True|False :
  (min-value(A) > B) or in-range?(A, B)

public defn less? (A:Double, B:Toleranced ) -> True|False :
  B > A

public defn less-eq? (A:Double, B:Toleranced ) -> True|False :
  B >= A

public defn greater? (A:Double, B:Toleranced ) -> True|False :
  B < A

public defn greater-eq? (A:Double, B:Toleranced ) -> True|False :
  B <= A

public defn almost-equal? (A:Toleranced, B:Toleranced, epsilon:Double) -> True|False :

  defn abs-err (f, A:Toleranced, B:Toleranced) -> Double :
    abs(f(A) - f(B))

  val comps = [min-value, typ-value, max-value]
  val diffVals = map(abs-err{_, A, B}, comps)
  all?({_ < epsilon}, diffVals)

public defn straddles-zero? (A:Toleranced) -> True|False :
  ; This function indicates whether this tolernace value
  ;   has a min and max value with differing signs.
  sign(min-value(A)) != sign(max-value(A))

;; Bit operators
;;   These have the potential to create zero, one, or two toleranced values.
;;    as a result.
;;   and    =>  Intersection of two toleranced values
;;               Returns:
;;                One Toleranced - overlapping area of two toleranced inputs
;;                False - Disjoint sets
;;   or     =>  Union of two toleranced values
;;                Returns:
;;                One toleranced - spans two overlapping toleranced inputs
;;                False - disjoint sets of toleranced - there is no overlap
;;  Not sure about xor:
;;   xor    =>  I'm not sure how this would be useful. It will
;;               return the disjoint sets of the tolerances.
;;               So it could return one, two, or zero tolerances

public defn bit-and (A:Toleranced, B:Toleranced) -> Toleranced|False :
  ; This operation should be communative
  label<Toleranced|False> return :
    if (A < B) or (B < A):
      return(false)
    else :
      val minV = max(min-value(A), min-value(B))
      val maxV = min(max-value(A), max-value(B))
      val typV = (typ(A) + typ(B)) / 2.0
      if (minV < typV) and (typV < maxV) :
        return(min-typ-max(minV, typV, maxV))
      else:
        return(min-max(minV, maxV))

public defn bit-or (A:Toleranced, B:Toleranced) -> Toleranced|False :
  ; This operation should be communative
  label<Toleranced|False> return :
    if (A < B) or (B < A) :
      return(false)
    else :
      val minV = min(min-value(A), min-value(B))
      val maxV = max(max-value(A), max-value(B))
      val typV = (typ(A) + typ(B)) / 2.0
      return(min-typ-max(minV, typV, maxV))
