#use-added-syntax(jitx)
defpackage etools/jitx/Network :
  import core
  import collections
  import jitx
  import jitx/commands
  import etools/jitx/CanonicalGround


; The concept of this code is to provide a means for defining a lumped
; circuit network tree. The idea is to provide a "DSL" for defining
; components that are used together to form a circuit network.
;
; In this graph there are Elements and Nodes.
;  Elements are the edges of the graph and are the resistors, capacitors, etc.
;  Nodes are the pins, ground, nets, etc of the circuit

; We can think of the circuit network as a graph. We have the following
;  operations to this graph for 2-pin elements
;
;  1.  Series (+) - string multiple elements in series
;  2.  Parallel (|) - put multiple elements in parallel
;  3.  Shunt Ground - Connect a given node to ground through an element
;         This uses the `CanonicalGround` concept because `net` objects
;         can't easily passed into the network. To connect to things other
;         than ground - Taps are a tool for accomplishing this.
;  5.  Invert (~) - Instead of connecting 1 -> 2 , connect 2 -> 1. reverses the
;        orientation of the component. Useful for polarizing caps, diodes, etc.
;  6.  TAP - For a particular node in the design

public defenum NetOp:
  COMPONENT
  SERIES
  PARALLEL
  SHUNT-GND
  INVERT
  TAP

; ANT = Abstract Network Tree
;   ANT are the elements of the tree that might look something like this:
;
;  Three Resistors in series
;  SERIES([ELEM(R1), ELEM(R2), ELEM(R3)])
;
;  One resistor in series with two resistors in parallel.
;  SERIES([ELEM(R1), PARALLEL([ELEM(R2), ELEM(R3)])])

public deftype ANT
public defmulti get-op (a:ANT) -> NetOp
public defmulti get-elements (a:ANT) -> Tuple<ANT>

public deftype Component <: ANT
public defmulti get-value (c:Component) -> Instantiable

public defn Component (i:Instantiable) -> Component:
  val comp = i
  new Component:
    defmethod get-op (this) : COMPONENT
    defmethod get-elements (this) : []
    defmethod get-value (this) : comp
    defmethod print (o:OutputStream, this):
      print(o, "Comp(%~)" % [name(comp)])

public defn Comp (i:Instantiable) -> Component:
  Component(i)

public deftype Tap <: ANT
public defmulti get-name (a:ANT) -> String
public defmulti get-pin-index (a:ANT) -> Int

public defn Tap (name:String, a:ANT, pIndex:Int) -> Tap :
  val n = name
  val elem = a
  if pIndex != 1 and pIndex != 2:
    fatal("Invalid Pin Index for Tap - Must 1 or 2")

  val idx = pIndex

  new Tap:
    defmethod get-op (this) : COMPONENT
    defmethod get-elements (this) : [elem]
    defmethod get-name (this) : n
    defmethod get-pin-index (this) : idx
    defmethod print (o:OutputStream, this):
      print(o, "Tag(name='%_', idx=%_, %~)" % [n, idx, elem])

public defn Tap (name:String, a:ANT) -> Tap :
  Tap(name, a, 1)

public deftype ANTVector <: ANT & Lengthable
public defmulti add (v:ANTVector, elem:ANT) -> False
public defmulti add-all (v:ANTVector, elems:Seqable<ANT>) -> False
defmulti children (v:ANTVector) -> Vector<ANT>

public defmethod add (v:ANTVector, elem:ANT) -> False :
  val kids = children(v)
  add(kids, elem)

public defmethod add-all (v:ANTVector, elems:Seqable<ANT>) -> False :
  val kids = children(v)
  add-all(kids, elems)

public defmethod length (v:ANTVector) -> Int :
  length(children(v))


public deftype Series <: ANTVector

public defn Series (elems:Tuple<ANT>) -> Series:
  var kids = Vector<ANT>(length(elems))
  add-all(kids, elems)

  new Series:
    defmethod get-op (this) : SERIES
    defmethod get-elements (this) : to-tuple(kids)
    defmethod children (this) : kids
    defmethod print (o:OutputStream, this) :
      print(o, "Series(%,)" % [kids])

public defn Series () -> Series:
  Series([])

public deftype Parallel <: ANTVector

public defn Parallel (elems:Tuple<ANT>) -> Parallel:
  var kids = Vector<ANT>(length(elems))
  add-all(kids, elems)

  new Parallel:
    defmethod get-op (this) : PARALLEL
    defmethod get-elements (this) : to-tuple(kids)
    defmethod children (this) : kids
    defmethod print (o:OutputStream, this) :
      print(o, "Parallel(%,)" % [kids])

public defn Parallel () -> Parallel :
  Parallel([])

public deftype ShuntGround <: ANT

public defn ShuntGround (a:ANT) -> ShuntGround :
  val elem = a

  new ShuntGround :
    defmethod get-op (this) : SHUNT-GND
    defmethod get-elements (this) : [elem]
    defmethod print (o:OutputStream, this) :
      print(o, "ShuntGround(%~)" % [a])

public deftype Invert <: ANT

public defn Invert (a:ANT) -> Invert :
  val elem = a
  new Invert :
    defmethod get-op (this) : INVERT
    defmethod get-elements (this) : [elem]
    defmethod print (o:OutputStream, this) :
      print(o, "Invert: %~" % [a])

public defn get-pin-by-name (obj:JITXObject, name:String) -> Maybe<JITXObject> :
  label<Maybe<JITXObject>> return:
    val pat = to-string(".%_" % [name])
    for p in pins(obj) do:
      val refName = to-string("%_" % [ref(p)])
      if suffix?(refName, pat) :
        return(One(p))
    return(None())

public defn get-cathode-anode (obj:JITXObject) -> Maybe<[JITXObject, JITXObject]> :
  val mC = get-pin-by-name(obj, "c")
  val mA = get-pin-by-name(obj, "a")
  match(mC, mA) :
    (oC:One<JITXObject>, oA:One<JITXObject>): One([value(oC), value(oA)])
    (x,y): None()

public defn get-pins (obj:JITXObject) -> [JITXObject, JITXObject] :
  ; Given an instantiated object - find the pins that
  ;  define its interfaces.
  ;  For caps/resistors, this is usually a tuple `p` of two pins
  ;  For Diodes, this is usually c / a

  val mCA = get-cathode-anode(obj)
  match(mCA):
    (oCA:One<[JITXObject, JITXObject]>):
      val ret = value(oCA)
      ret
    (_:None):
      [obj.p[1], obj.p[2]]

public defn extrapolate-all (a:ANTVector, taps:Vector<[String,JITXObject]>) -> Seq<[JITXObject, JITXObject]> :
  inside pcb-module:
    for elem in get-elements(a) seq:
      extrapolate(elem, taps)

public defn connect-series (a:Series, taps:Vector<[String,JITXObject]>) -> [JITXObject, JITXObject] :
  inside pcb-module:
    val pinSets = to-tuple(extrapolate-all(a, taps))
    val cnt = length(pinSets)

    ; Series connect all of the components
    for i in 0 to (cnt - 1) do :
      net (pinSets[i][1], pinSets[i + 1][0])

    ; Return the first pin and the last pin
    [pinSets[0][0], pinSets[cnt - 1][1]]

public defn connect-parallel (a:Parallel, taps:Vector<[String,JITXObject]>) -> [JITXObject, JITXObject] :
  inside pcb-module:
    val pinSets = to-tuple(extrapolate-all(a, taps))
    val cnt = length(pinSets)

    ; Often it is useful to have a `ShuntGround` in the parallel components.
    ;   If we force this to connect in parallel though - it means all the
    ;   components get connected to ground which is probably not what we want.
    ;   So this filters out any pins with `canonical-ground` connections.
    val notGrounded = {not is-grounded?(_)}
    defn filter-pins (pSet:Tuple<[JITXObject, JITXObject]>, pinIdx:Int) :
      to-tuple(filter(notGrounded, map(get{_, pinIdx}, pSet)))

    val p1Set = filter-pins(pinSets, 0)
    val p2Set = filter-pins(pinSets, 1)

    net (p1Set)
    net (p2Set)

    [p1Set[0], p2Set[0]]

public defn extrapolate (a:ANT, taps:Vector<[String,JITXObject]>) -> [JITXObject, JITXObject] :
  inside pcb-module :
    match(a) :
      (s:Series):
        ; println("Extrapolate Series: %~" % [s])
        connect-series(s, taps)
      (s:Parallel):
        ;println("Extrapolate Parallel: %~" % [s])
        connect-parallel(s, taps)
      (s:Component):
        ;println("Extrapolate Component: %~" % [s])
        inst obj : get-value(s)
        get-pins(obj)
      (s:ShuntGround):
        ;println("Extrapolate Shunt: %~" % [s])
        val child = get-elements(s)[0]
        val [p1, p2] = extrapolate(child, taps)
        ground-pin(p2)
        [p1, p2]
      (s:Invert):
        ;println("Extrapolate Invert: %~" % [s])
        val child = get-elements(s)[0]
        val [p1, p2] = extrapolate(child, taps)
        [p2, p1]
      (s:Tap):
        val child = get-elements(s)[0]
        val childPins = extrapolate(child, taps)
        ; val [p1, p2] = extrapolate(child, taps)
        ; Add the tap here.
        val tapPin = childPins[ get-pin-index(s) - 1 ]
        val name = get-name(s)
        add(taps, [name, tapPin])
        childPins

public defn make-circuit (a:ANT) -> Instantiable :

  pcb-module network-circuit:
    port p : pin[[1 2]]
    val taps = Vector<[String,JITXObject]>()
    val [p1, p2] = extrapolate(a, taps)
    net (p[1], p1)
    net (p[2], p2)

    ; Programmatically create ports for all the
    ;   taps
    for tap in taps do:
      val [name, pinObj] = tap
      if name == "p":
        fatal("Invalid Tap Name '%_' - Must be unique in 'network-circuit'" % [name])
      val namedPort = make-port(to-symbol(name), SinglePin())
      net (namedPort, pinObj)

  network-circuit


;;;;;;;;;;;;;;;;;;
; Operators
;;;;;;;;;;;;;;;;;;

public defn bit-not (a:ANT) -> ANT:
  Invert(a)

public defn bit-not (a:Instantiable) -> ANT:
  Invert(Comp(a))

; @TODO - for Series and Parallel, I kind of figure
;   there will be multiple plusses in a row like this:
;  R1 + R2 + (R3|R4|Rg|Rf)
;
;  It would be nice if there was some pass that collapses
;  the Parallel(R3, Parallel(R4, Parallel(Rg, Rf))) into
;      Parallel(R3, R4, Rg, Rf)

public defn plus (a:ANT, b:ANT) -> ANT:
  Series([a,b])

public defn plus (a:ANT, b:Instantiable) -> ANT :
  Series([a, Comp(b)])

public defn plus (a:Instantiable, b:ANT) -> ANT :
  Series([Comp(a), b])

public defn bit-or (a:ANT, b:ANT) -> ANT:
  Parallel([a,b])

public defn bit-or (a:ANT, b:Instantiable) -> ANT :
  Parallel([a, Comp(b)])

public defn bit-or (a:Instantiable, b:ANT) -> ANT :
  Parallel([Comp(a), b])
