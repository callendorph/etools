defpackage etools/NumTools :
  import core

public defn to-hex-char (digit:Int) -> Char :
  if digit < 10 :
    to-char(digit + 0x30)
  else:
    to-char((digit - 10) + 0x41)

public defn to-hex (x:Long) -> String :
  val ret = StringBuffer()
  val is-neg = x < 0L
  var curr = x
  if is-neg:
    ; We extract out the sign flag and then add it back in
    ; to the final nibble. Otherwise it throws the math off.
    curr = curr & (~ 0x8000000000000000L)
  for i in 0 to 16 do :
    var nibble = to-int(curr % 16L)
    if i == 15 and is-neg:
      nibble = nibble | 0x8
    val nextChar = to-hex-char(nibble)
    curr = curr / 16L
    add(ret, nextChar)

  val revRet = StringBuffer()
  add-all(revRet, in-reverse(to-seq(ret)))
  to-string(revRet)

public defn saturate (x:Double, minV:Double, maxV:Double) -> Double :
  if x > maxV:
    maxV
  else if x < minV :
    minV
  else:
    x

public defn minsat (x:Double, minV:Double) -> Double :
  saturate(x, minV, DOUBLE-POSITIVE-INFINITY)

public defn maxsat (x:Double, maxV:Double) -> Double :
  saturate(x, DOUBLE-NEGATIVE-INFINITY, maxV)