defpackage etools/ESeries :
  import core
  import collections
  import math

public defstruct InvalidValue <: Exception : (msg:String)

defmethod print (o:OutputStream, e:InvalidValue) :
  print(o, "Invalid Value: %_" % [msg(e)])

public defn round-places (v:Double, places:Int) -> Double :
  ; Round off the decimal places for a value.
  ;  @param v This value is expected to be in the range from 0.0 - 10.0
  ;  @param places number of decimal places to truncate and round to.
  if not places > 0 :
    throw(InvalidValue(to-string("Expects places > 0 : %_ > 0" % [places])))
  if not v < 10.0 :
    throw(InvalidValue(to-string("Expects v < 10.0 : %_ < 10.0" % [v])))

  val deciPlaces = pow(10.0, to-double(places - 1))
  round(v * deciPlaces) / deciPlaces

public defn get-power-of-10 (v:Double) -> Double :
  ; Get the power of 10 series for a value. For example: 
  ;   532.0 => 5.32 * 10^2 => Returns 2
  ;   0.34 => 3.4 * 10^-1 => Returns -1
  if not (v > 0.0) :
    throw(InvalidValue(to-string("Expects v > 0 : %_ > 0" % [v])))
  floor(log10(v))  

public defn rounded-log10 (v:Int, N:Int, places:Int) -> Double :
  ; Compute the N-th root of the round log series.
  if not ( v >= 0 ) :
    throw(InvalidValue(to-string("Expects v >= 0 : %_ >= 0 " % [v])))

  if not ( N > 0 ) :
    throw(InvalidValue(to-string("Expects N > 0 : %_ > 0" % [N])))

  if not v < N : 
    throw(InvalidValue(to-string("Expects v < N : %_ < %_" % [v, N])))

  round-places(pow(10.0, to-double(v) / to-double(N)), places)

; E-series Preferred numbers
; https://en.wikipedia.org/wiki/E_series_of_preferred_numbers
public deftype ESeries

public defmulti name (self:ESeries) -> String
public defmulti elements (self:ESeries) -> Int
public defmulti places (self:ESeries) -> Int
; Nominal Tolerance for this Series of values as a 
;  "Percentage" value (0-1.0)
public defmulti series-tolerance (self:ESeries) -> Double
; Get the Values that constitute the closed sequence of 
;  this series. 
public defmulti get-series (self:ESeries) -> Tuple<Double>
; Find the closest value in this series to the passed `v` parameter.
public defmulti find-nearest (self:ESeries, v:Double) -> Double

public defmethod get-series (self:ESeries) -> Tuple<Double> :
  ; Conceptually I see the series as imutable, hence the use of Tuple
  ;   but I'm not sure that is optimal. It makes searching more difficult.
  val N = elements(self)
  val ret = map(rounded-log10{_, N, places(self)}, 0 to N)
  to-tuple(ret)

public defmethod find-nearest (self:ESeries, v:Double) -> Double :
  ; Find the closest value in this series. 
  ; @param v - this value can be any positive value. We will determine
  ;    what power of ten (ie, 1-10, 10-100, etc) and then use that to 
  ;    determine what the nearest value in the series for that power of ten is.
  val pwr10 = get-power-of-10(v)
  val series = to-array<Double>(get-series(self))
  map!({_ * pow(10.0, pwr10)}, series)
  val err = map<Double>({abs(_ - v)}, series)
  val errVals = to-array<[Double, Double]>(zip(err, series))

  qsort!(get{_,0}, errVals)
  errVals[0][1]
  

public deftype E12 <: ESeries
public deftype E24 <: ESeries
public deftype E48 <: ESeries
public deftype E96 <: ESeries

public defn E12 () -> E12 : 
  val name = "E12"
  val elements = 12
  val places = 2
  val tolerance = 0.1
  new E12 : 
    defmethod name (this) : name
    defmethod elements (this) : elements
    defmethod places (this) : places
    defmethod series-tolerance (this) : tolerance
    defmethod get-series (this) -> Tuple<Double> :
      ; For historical reasons - there are several values
      ;   in the E12 series that don't match the nth root
      ;   power series model. I've thus delineated the
      ;   series manually.
      [ 1.0 1.2 1.5 1.8 2.2 2.7 3.3 3.9 4.7 5.6 6.8 8.2 ]

public defn E24 () -> E24 :
  val name = "E24"
  val elements = 24
  val places = 2
  val tolerance = 0.05
  new E24 : 
    defmethod name (this) : name
    defmethod elements (this) : elements
    defmethod places (this) : places    
    defmethod series-tolerance (this) : tolerance
    defmethod get-series (this) -> Tuple<Double> :
      ; For historical reasons - there are several values
      ;   in the E24 series that don't match the nth root
      ;   power series model. I've thus delineated the
      ;   series manually.
      [
        1.0 1.1 1.2 1.3 1.5 1.6 1.8 2.0 2.2 2.4 2.7 3.0
        3.3 3.6 3.9 4.3 4.7 5.1 5.6 6.2 6.8 7.5 8.2 9.1
      ]

public defn E48 () -> E48 :
  val name = "E48"
  val elements = 48
  val places = 3
  val tolerance = 0.02
  new E48 : 
    defmethod name (this) : name
    defmethod elements (this) : elements
    defmethod places (this) : places
    defmethod series-tolerance (this) : tolerance

public defn E96 () -> E96 :
  val name = "E96"
  val elements = 96
  val places = 3
  val tolerance = 0.01
  new E96 : 
    defmethod name (this) : name
    defmethod elements (this) : elements
    defmethod places (this) : places
    defmethod series-tolerance (this) : tolerance





